// Generated by CoffeeScript 1.6.3
(function() {
  Object.defineProperties(Array, {
    flatten: {
      value: function($this) {
        var $a, $that, _i, _len;
        if ($this == null) {
          return [];
        }
        $a = [];
        for (_i = 0, _len = $this.length; _i < _len; _i++) {
          $that = $this[_i];
          if (Array.isArray($that)) {
            $a = $a.concat(Array.flatten($that));
          } else {
            $a.push($that);
          }
        }
        return $a;
      }
    },
    inject: {
      value: function($this, $memo, $func) {
        var $that, _i, _len;
        for (_i = 0, _len = $this.length; _i < _len; _i++) {
          $that = $this[_i];
          $memo = $func.call($this, $memo, $that);
        }
        return $memo;
      }
    },
    find: {
      value: function($this, $func) {
        var $that, _i, _len;
        for (_i = 0, _len = $this.length; _i < _len; _i++) {
          $that = $this[_i];
          if ($func.call($this, $that)) {
            return $that;
          }
        }
      }
    }
  });

  Object.defineProperties(Array.prototype, {
    first: {
      get: function() {
        return this[0];
      }
    },
    last: {
      get: function() {
        return this[this.length - 1];
      }
    },
    compact: {
      get: function() {
        var $that, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          $that = this[_i];
          if ($that) {
            _results.push($that);
          }
        }
        return _results;
      }
    },
    flatten: {
      get: function() {
        return Array.flatten(this);
      }
    },
    inject: {
      value: function($memo, $func) {
        return Array.inject(this, $memo, $func);
      }
    },
    find: {
      value: function($func) {
        return Array.find(this, $func);
      }
    }
  });

}).call(this);
