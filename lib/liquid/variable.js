// Generated by CoffeeScript 1.6.3
(function() {
  module.exports = function(Liquid) {
    var Variable;
    return Variable = (function() {
      function Variable(markup) {
        var filterMatches, filters, match, self;
        this.markup = markup;
        this.name = null;
        this.filters = [];
        self = this;
        match = markup.match(/\s*("[^"]+"|'[^']+'|[^\s,|]+)/);
        if (match) {
          this.name = match[1];
          filterMatches = markup.match(/\|\s*(.*)/);
          if (filterMatches) {
            filters = filterMatches[1].split(/\|/);
            filters.forEach(function(f) {
              var filterArgs, filterName, matches;
              matches = f.match(/\s*(\w+)/);
              if (matches) {
                filterName = matches[1];
                filterArgs = [];
                Liquid.Utils.flatten(f.match(/(?:[:|,]\s*)("[^"]+"|'[^']+'|[^\s,|]+)/g) || []).forEach(function(arg) {
                  var cleanupMatch;
                  cleanupMatch = arg.match(/^[\s|:|,]*(.*?)[\s]*$/);
                  if (cleanupMatch) {
                    return filterArgs.push(cleanupMatch[1]);
                  }
                });
                return self.filters.push([filterName, filterArgs]);
              }
            });
          }
        }
      }

      Variable.prototype.render = function(context) {
        var output;
        if (this.name == null) {
          return "";
        }
        output = context.get(this.name);
        this.filters.forEach(function(filter) {
          var filterArgs, filterName;
          filterName = filter[0];
          filterArgs = (filter[1] || []).map(function(arg) {
            return context.get(arg);
          });
          filterArgs.unshift(output);
          return output = context.invoke(filterName, filterArgs);
        });
        return output;
      };

      return Variable;

    })();
  };

}).call(this);
