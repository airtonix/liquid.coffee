// Generated by CoffeeScript 1.6.3
(function() {
  var Liquid;

  Liquid = require('../liquid');

  Liquid.Variable = (function() {
    var FilterParser;

    FilterParser = RegExp("(?:" + Liquid.FilterSeparator.source + "|(?:\\s*(?!(?:" + Liquid.FilterSeparator.source + "))(?:" + Liquid.QuotedFragment.source + "|\\S+)\\s*)+)");

    function Variable(markup) {
      var filters, match,
        _this = this;
      this.markup = markup;
      this.name = null;
      this.filters = [];
      if (match = markup.match(RegExp("\\s*(" + Liquid.QuotedFragment.source + ")(.*)"))) {
        this.name = match[1];
        if (match[2].match(RegExp("" + Liquid.FilterSeparator.source + "\\s*(.*)"))) {
          filters = match[2].match(RegExp("" + FilterParser.source, "g"));
          filters.forEach(function(f) {
            var filterargs, filtername, matches;
            if (matches = f.match(/\s*(\w+)/)) {
              filtername = matches[1];
              filterargs = f.split(RegExp("(?:" + Liquid.FilterArgumentSeparator + "|" + Liquid.ArgumentSeparator + ")\\s*(" + Liquid.QuotedFragment.source + ")"));
              filterargs.shift();
              filterargs.pop();
              return _this.filters.push([filtername, filterargs.flatten.compact]);
            }
          });
        }
      }
    }

    Variable.prototype.render = function(context) {
      if (this.name == null) {
        return '';
      }
      return this.filters.inject(context.get(this.name), function(output, filter) {
        var e, filterargs;
        filterargs = filter[1].map(function(a) {
          return context.get(a);
        });
        try {
          return output = context.invoke(filter[0], [output].concat(filterargs));
        } catch (_error) {
          e = _error;
          throw new Liquid.FilterNotFound("Error - filter '" + filter[0] + "' in '" + (this.markup.trim()) + "' could not be found.");
        }
      });
    };

    return Variable;

  })();

}).call(this);
