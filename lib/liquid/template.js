// Generated by CoffeeScript 1.6.3
(function() {
  module.exports = function(Liquid) {
    var Template;
    return Template = (function() {
      Template.fileSystem = new Liquid.BlankFileSystem();

      Template.tags = {};

      Template.registerTag = function(name, klass) {
        return Liquid.Template.tags[name] = klass;
      };

      Template.registerFilter = function(filters) {
        return Liquid.Strainer.globalFilter(filters);
      };

      Template.tokenize = function(src) {
        var tokens;
        tokens = src.split(/(\{\%.*?\%\}|\{\{.*?\}\}?)/);
        if (tokens[0] === "") {
          tokens.shift();
        }
        return tokens;
      };

      Template.parse = function(src) {
        return (new Liquid.Template).parse(src);
      };

      function Template() {
        this.root = null;
        this.registers = {};
        this.assigns = {};
        this.errors = [];
        this.rethrowErrors = false;
      }

      Template.prototype.parse = function(src) {
        this.root = new Liquid.Document(Liquid.Template.tokenize(src));
        return this;
      };

      Template.prototype.render = function() {
        var args, context, key, val, _ref, _ref1;
        if (!this.root) {
          return "";
        }
        args = {
          ctx: arguments[0],
          filters: arguments[1],
          registers: arguments[2]
        };
        context = null;
        if (args.ctx instanceof Liquid.Context) {
          context = args.ctx;
          this.assigns = context.assigns;
          this.registers = context.registers;
        } else {
          _ref = args.ctx;
          for (key in _ref) {
            val = _ref[key];
            this.assigns[key] = val;
          }
          _ref1 = args.registers;
          for (key in _ref1) {
            val = _ref1[key];
            this.registers[key] = val;
          }
          context = new Liquid.Context(this.assigns, this.registers, this.rethrowErrors);
        }
        if (args.filters) {
          context.addFilters(arg.filters);
        }
        try {
          return this.root.render(context).join("");
        } finally {
          this.errors = context.errors;
        }
      };

      Template.prototype.renderWithErrors = function() {
        var res, savedRethrowErrors;
        savedRethrowErrors = this.rethrowErrors;
        this.rethrowErrors = true;
        res = this.render.apply(this, arguments);
        this.rethrowErrors = savedRethrowErrors;
        return res;
      };

      return Template;

    })();
  };

}).call(this);
