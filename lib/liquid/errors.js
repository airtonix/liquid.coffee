// Generated by CoffeeScript 1.6.3
(function() {
  var Liquid, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../liquid');

  Liquid.ArgumentError = (function(_super) {
    __extends(ArgumentError, _super);

    function ArgumentError() {
      _ref = ArgumentError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return ArgumentError;

  })(Error);

  Liquid.ContextError = (function(_super) {
    __extends(ContextError, _super);

    function ContextError() {
      _ref1 = ContextError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return ContextError;

  })(Error);

  Liquid.FilterNotFound = (function(_super) {
    __extends(FilterNotFound, _super);

    function FilterNotFound() {
      _ref2 = FilterNotFound.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return FilterNotFound;

  })(Error);

  Liquid.FileSystemError = (function(_super) {
    __extends(FileSystemError, _super);

    function FileSystemError() {
      _ref3 = FileSystemError.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return FileSystemError;

  })(Error);

  Liquid.StandardError = (function(_super) {
    __extends(StandardError, _super);

    function StandardError() {
      _ref4 = StandardError.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    return StandardError;

  })(Error);

  Liquid.SyntaxError = (function(_super) {
    __extends(SyntaxError, _super);

    function SyntaxError() {
      _ref5 = SyntaxError.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    return SyntaxError;

  })(Error);

  Liquid.StackLevelError = (function(_super) {
    __extends(StackLevelError, _super);

    function StackLevelError() {
      _ref6 = StackLevelError.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    return StackLevelError;

  })(Error);

  Liquid.MemoryError = (function(_super) {
    __extends(MemoryError, _super);

    function MemoryError() {
      _ref7 = MemoryError.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return MemoryError;

  })(Error);

}).call(this);
