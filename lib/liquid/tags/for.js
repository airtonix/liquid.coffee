// Generated by CoffeeScript 1.6.3
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.For = (function(_super) {
    var Syntax;

    __extends(For, _super);

    Syntax = RegExp("(\\w+)\\s+in\\s+(" + Liquid.StrictQuotedFragment.source + ")\\s*(reversed)?");

    function For(tag, markup, tokens) {
      var $,
        _this = this;
      if ($ = markup.match(Syntax)) {
        this.variableName = $[1];
        this.collectionName = $[2];
        this.name = "" + $[1] + "-" + $[2];
        this.reversed = $[3];
        this.attributes = {};
        markup.replace(Liquid.TagAttributes, function(key, value) {
          _this.attributes[key] = value;
          return console.log(key + ' ' + value);
        });
      } else {
        throw new Liquid.SyntaxError("Syntax Error in 'for loop' - Valid syntax: for [item] in [collection]");
      }
      For.__super__.constructor.call(this, tag, markup, tokens);
    }

    For.prototype.render = function(context) {
      var collection, from, length, limit, result, segment, to,
        _this = this;
      if (context.registers["for"] == null) {
        context.registers["for"] = {};
      }
      collection = context.get(this.collectionName);
      if (collection.forEach == null) {
        return '';
      }
      from = this.attributes['offset'] === 'continue' ? context.registers["for"][this.name] : context.get(this.attributes['offset']);
      limit = context.get(this.attributes['limit']);
      to = limit ? limit + from : null;
      if (from == null) {
        from = 0;
      }
      if (to == null) {
        to = collection.length;
      }
      segment = collection.slice(from, to);
      if (segment.length === 0) {
        return '';
      }
      if (this.reversed) {
        segment.reverse();
      }
      result = '';
      length = segment.length;
      context.registers["for"][this.name] = from + segment.length;
      context.stack(function() {
        return segment.forEach(function(item, index) {
          context.set(_this.variableName, item);
          context.set('forloop', {
            name: _this.name,
            length: length,
            index: index + 1,
            index0: index,
            rindex: length - index,
            rindex0: length - index - 1,
            first: index === 0,
            last: index === length - 1
          });
          return result += (_this.renderAll(_this.nodelist, context) || []).join("");
        });
      });
      return result;
    };

    return For;

  })(Liquid.Block);

  Liquid.Template.registerTag("for", Liquid.Tags.For);

}).call(this);
