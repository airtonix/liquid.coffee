// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(Liquid) {
    var Cycle;
    Cycle = (function(_super) {
      __extends(Cycle, _super);

      Cycle.prototype.tagSimpleSyntax = /"[^"]+"|'[^']+'|[^\s,|]+/;

      Cycle.prototype.tagNamedSyntax = /("[^"]+"|'[^']+'|[^\s,|]+)\s*\:\s*(.*)/;

      function Cycle(tag, markup, tokens) {
        var matches, variables;
        matches = void 0;
        variables = void 0;
        matches = markup.match(this.tagNamedSyntax);
        if (matches) {
          this.variables = this.variablesFromString(matches[2]);
          this.name = matches[1];
        } else {
          matches = markup.match(this.tagSimpleSyntax);
          if (matches) {
            this.variables = this.variablesFromString(markup);
            this.name = "'" + this.variables.toString() + "'";
          } else {
            throw "Syntax error in 'cycle' - Valid syntax: cycle [name :] var [, var2, var3 ...]";
          }
        }
        Cycle.__super__.constructor.call(this, tag, markup, tokens);
      }

      Cycle.prototype.render = function(context) {
        var key, output,
          _this = this;
        key = context.get(this.name);
        output = "";
        if (!context.registers["cycle"]) {
          context.registers["cycle"] = {};
        }
        if (!context.registers["cycle"][key]) {
          context.registers["cycle"][key] = 0;
        }
        context.stack(function() {
          var iter, results;
          iter = context.registers["cycle"][key];
          results = context.get(_this.variables[iter]);
          iter += 1;
          if (iter === _this.variables.length) {
            iter = 0;
          }
          context.registers["cycle"][key] = iter;
          return output = results;
        });
        return output;
      };

      Cycle.prototype.variablesFromString = function(markup) {
        return markup.split(",").map(function(varname) {
          var match;
          match = varname.match(/\s*("[^"]+"|'[^']+'|[^\s,|]+)\s*/);
          if (match[1]) {
            return match[1];
          } else {
            return null;
          }
        });
      };

      return Cycle;

    })(Liquid.Tag);
    return Liquid.Template.registerTag("cycle", Cycle);
  };

}).call(this);
