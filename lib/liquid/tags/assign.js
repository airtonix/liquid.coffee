// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(Liquid) {
    var Assign;
    Assign = (function(_super) {
      __extends(Assign, _super);

      Assign.prototype.tagSyntax = /((?:\(?[\w\-\.\[\]]\)?)+)\s*=\s*((?:"[^"]+"|'[^']+'|[^\s,|]+)+)/;

      function Assign(tagName, markup, tokens) {
        var parts;
        parts = markup.match(this.tagSyntax);
        if (parts) {
          this.to = parts[1];
          this.from = parts[2];
        } else {
          throw "Syntax error in 'assign' - Valid syntax: assign [var] = [source]";
        }
        Assign.__super__.constructor.call(this, tagName, markup, tokens);
      }

      Assign.prototype.render = function(context) {
        context.scopes[context.scopes.length - 1][this.to.toString()] = context.get(this.from);
        return "";
      };

      return Assign;

    })(Liquid.Tag);
    return Liquid.Template.registerTag("assign", Assign);
  };

}).call(this);
