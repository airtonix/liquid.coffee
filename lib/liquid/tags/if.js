// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(Liquid) {
    var If;
    If = (function(_super) {
      __extends(If, _super);

      If.prototype.tagSyntax = /("[^"]+"|'[^']+'|[^\s,|]+)\s*([=!<>a-z_]+)?\s*("[^"]+"|'[^']+'|[^\s,|]+)?/;

      function If(tag, markup, tokens) {
        this.nodelist = [];
        this.blocks = [];
        this.pushBlock("if", markup);
        If.__super__.constructor.call(this, tag, markup, tokens);
      }

      If.prototype.unknownTag = function(tag, markup, tokens) {
        if (tag === "elsif" || tag === "else") {
          return this.pushBlock(tag, markup);
        } else {
          return If.__super__.unknownTag.call(this, tag, markup, tokens);
        }
      };

      If.prototype.render = function(context) {
        var output,
          _this = this;
        output = "";
        context.stack(function() {
          var block, i;
          i = 0;
          while (i < _this.blocks.length) {
            block = _this.blocks[i];
            if (block.evaluate(context)) {
              output = _this.renderAll(block.attachment, context);
              return;
            }
            i++;
          }
        });
        return Liquid.Utils.flatten([output]).join("");
      };

      If.prototype.pushBlock = function(tag, markup) {
        var block, condition, expMatches, expressions, newCondition, operator;
        block = void 0;
        if (tag === "else") {
          block = new ElseCondition();
        } else {
          expressions = markup.split(/\b(and|or)\b/).reverse();
          expMatches = expressions.shift().match(this.tagSyntax);
          if (!expMatches) {
            throw "Syntax Error in tag '" + tag + "' - Valid syntax: " + tag + " [expression]";
          }
          condition = new Condition(expMatches[1], expMatches[2], expMatches[3]);
          while (expressions.length > 0) {
            operator = expressions.shift();
            expMatches = expressions.shift().match(this.tagSyntax);
            if (!expMatches) {
              throw "Syntax Error in tag '" + tag + "' - Valid syntax: " + tag + " [expression]";
            }
            newCondition = new Condition(expMatches[1], expMatches[2], expMatches[3]);
            newCondition[operator](condition);
            condition = newCondition;
          }
          block = condition;
        }
        block.attach([]);
        this.blocks.push(block);
        return this.nodelist = block.attachment;
      };

      return If;

    })(Liquid.Block);
    return Liquid.Template.registerTag("if", If);
  };

}).call(this);
