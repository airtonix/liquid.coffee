// Generated by CoffeeScript 1.6.3
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.BlockDrop = (function(_super) {
    __extends(BlockDrop, _super);

    function BlockDrop(block) {
      this.block = block;
    }

    BlockDrop.prototype["super"] = function() {
      return this.block.callSuper(this.context);
    };

    return BlockDrop;

  })(Liquid.Drop);

  Liquid.Tags.Block = (function(_super) {
    var Syntax;

    __extends(Block, _super);

    Syntax = /(\w)+/;

    Block.prototype.parent = null;

    Block.prototype.name = '';

    function Block(tagName, markup, tokens) {
      var $;
      if (($ = markup.match(Syntax)) != null) {
        this.name = $[1];
      } else {
        throw new Liquid.SyntaxError("Syntax Error in 'block' - Valid syntax: block [name]");
      }
      if (tokens != null) {
        Block.__super__.constructor.call(this, tagName, markup, tokens);
      }
    }

    Block.prototype.render = function(context) {
      var _this = this;
      return context.stack(function() {
        context['block'] = new Liquid.BlockDrop(_this);
        return _this.renderAll(_this.nodelist, context);
      });
    };

    Block.prototype.addParent = function(nodelist) {
      if (this.parent != null) {
        return this.parent.addParent(nodelist);
      } else {
        this.parent = Liquid.Tags.Block(this.tagName, this.name, null);
        return this.parent.nodelist = nodelist;
      }
    };

    Block.prototype.callSuper = function(context) {
      if (this.parent != null) {
        return this.parent.render(context);
      } else {
        return '';
      }
    };

    return Block;

  })(Liquid.Block);

  Liquid.Template.registerTag("block", Liquid.Tags.Block);

}).call(this);
