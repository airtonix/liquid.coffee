// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(Liquid) {
    var Include;
    Include = (function(_super) {
      __extends(Include, _super);

      Include.prototype.tagSyntax = /((?:"[^"]+"|'[^']+'|[^\s,|]+)+)(\s+(?:with|for)\s+((?:"[^"]+"|'[^']+'|[^\s,|]+)+))?/;

      function Include(tag, markup, tokens) {
        var attMatchs, matches;
        matches = (markup || "").match(this.tagSyntax);
        if (matches) {
          this.templateName = matches[1];
          this.templateNameVar = this.templateName.substring(1, this.templateName.length - 1);
          this.variableName = matches[3];
          this.attributes = {};
          attMatchs = markup.match(/(\w*?)\s*\:\s*("[^"]+"|'[^']+'|[^\s,|]+)/g);
          if (attMatchs) {
            attMatchs.forEach((function(pair) {
              pair = pair.split(":");
              return this.attributes[pair[0].trim()] = pair[1].trim();
            }), this);
          }
        } else {
          throw "Error in tag 'include' - Valid syntax: include '[template]' (with|for) [object|collection]";
        }
        Include.__super__.constructor.call(this, tag, markup, tokens);
      }

      Include.prototype.render = function(context) {
        var output, partial, source, variable,
          _this = this;
        source = Template.fileSystem.readTemplateFile(context.get(this.templateName));
        partial = Template.parse(source);
        variable = context.get(this.variableName || this.templateNameVar);
        output = "";
        context.stack(function() {
          _this.attributes.forEach = function(fun) {
            var i, key, pair, thisp, value;
            if (typeof fun !== "function") {
              throw "Object.forEach requires first argument to be a function";
            }
            i = 0;
            thisp = arguments[1];
            for (key in this) {
              value = this[key];
              pair = [key, value];
              pair.key = key;
              pair.value = value;
              fun.call(thisp, pair, i, this);
              i++;
            }
            return null;
          };
          _this.attributes.forEach(function(pair) {
            return context.set(pair.key, context.get(pair.value));
          });
          if (variable instanceof Array) {
            return output = variable.map(function(variable) {
              context.set(this.templateNameVar, variable);
              return partial.render(context);
            });
          } else {
            context.set(_this.templateNameVar, variable);
            return output = partial.render(context);
          }
        });
        return output = Liquid.Utils.flatten([output]).join("");
      };

      return Include;

    })(Liquid.Tag);
    return Liquid.Template.registerTag("include", Include);
  };

}).call(this);
