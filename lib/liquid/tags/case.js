// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(Liquid) {
    var Case;
    Case = (function(_super) {
      __extends(Case, _super);

      Case.prototype.tagSyntax = /("[^"]+"|'[^']+'|[^\s,|]+)/;

      Case.prototype.tagWhenSyntax = /("[^"]+"|'[^']+'|[^\s,|]+)(?:(?:\s+or\s+|\s*\,\s*)("[^"]+"|'[^']+'|[^\s,|]+.*))?/;

      function Case(tagName, markup, tokens) {
        var parts;
        this.blocks = [];
        this.nodelist = [];
        parts = markup.match(this.tagSyntax);
        if (parts) {
          this.left = parts[1];
        } else {
          throw "Syntax error in 'case' - Valid syntax: case [condition]";
        }
        Case.__super__.constructor.call(this, tagName, markup, tokens);
      }

      Case.prototype.unknownTag = function(tag, markup, tokens) {
        switch (tag) {
          case "when":
            return this.recordWhenCondition(markup);
          case "else":
            return this.recordElseCondition(markup);
          default:
            return Case.__super__.unknownTag.call(this, tag, markup, tokens);
        }
      };

      Case.prototype.render = function(context) {
        var execElseBlock, output,
          _this = this;
        output = [];
        execElseBlock = true;
        context.stack(function() {
          var block, i;
          i = 0;
          while (i < _this.blocks.length) {
            block = _this.blocks[i];
            if (block.isElse) {
              if (execElseBlock === true) {
                output = Liquid.Utils.flatten([output, _this.renderAll(block.attachment, context)]);
              }
              return output;
            } else if (block.evaluate(context)) {
              execElseBlock = false;
              output = Liquid.Utils.flatten([output, _this.renderAll(block.attachment, context)]);
            }
            i++;
          }
        });
        return output;
      };

      Case.prototype.recordWhenCondition = function(markup) {
        var block, parts, _results;
        _results = [];
        while (markup) {
          parts = markup.match(this.tagWhenSyntax);
          if (!parts) {
            throw "Syntax error in tag 'case' - Valid when condition: {% when [condition] [or condition2...] %} ";
          }
          markup = parts[2];
          block = new Liquid.Condition(this.left, "==", parts[1]);
          this.blocks.push(block);
          _results.push(this.nodelist = block.attach([]));
        }
        return _results;
      };

      Case.prototype.recordElseCondition = function(markup) {
        var block;
        if ((markup || "").trim() !== "") {
          throw "Syntax error in tag 'case' - Valid else condition: {% else %} (no parameters) ";
        }
        block = new Liquid.ElseCondition();
        this.blocks.push(block);
        return this.nodelist = block.attach([]);
      };

      return Case;

    })(Liquid.Block);
    return Liquid.Template.registerTag("case", Case);
  };

}).call(this);
