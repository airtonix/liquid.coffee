// Generated by CoffeeScript 1.6.3
(function() {
  var strftime;

  strftime = require('strftime');

  module.exports = function(Liquid) {
    var StandardFilters;
    StandardFilters = {
      size: function(iterable) {
        if (iterable["length"]) {
          return iterable.length;
        } else {
          return 0;
        }
      },
      downcase: function(input) {
        return input.toString().toLowerCase();
      },
      upcase: function(input) {
        return input.toString().toUpperCase();
      },
      capitalize: function(input) {
        var str;
        str = input.toString();
        return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();
      },
      escape: function(input) {
        input = input.toString();
        input = input.replace(/&/g, "&amp;");
        input = input.replace(/</g, "&lt;");
        input = input.replace(/>/g, "&gt;");
        input = input.replace(/"/g, "&quot;");
        return input;
      },
      h: function(input) {
        input = input.toString();
        input = input.replace(/&/g, "&amp;");
        input = input.replace(/</g, "&lt;");
        input = input.replace(/>/g, "&gt;");
        input = input.replace(/"/g, "&quot;");
        return input;
      },
      truncate: function(input, length, string) {
        var seg;
        if (!input || input === "") {
          return "";
        }
        length = length || 50;
        string = string || "...";
        seg = input.slice(0, length);
        if (input.length > length) {
          return input.slice(0, length) + string;
        } else {
          return input;
        }
      },
      truncatewords: function(input, words, string) {
        var l, wordlist;
        if (!input || input === "") {
          return "";
        }
        words = parseInt(words || 15);
        string = string || "...";
        wordlist = input.toString().split(" ");
        l = Math.max(words, 0);
        if (wordlist.length > l) {
          return wordlist.slice(0, l).join(" ") + string;
        } else {
          return input;
        }
      },
      truncate_words: function(input, words, string) {
        var l, wordlist;
        if (!input || input === "") {
          return "";
        }
        words = parseInt(words || 15);
        string = string || "...";
        wordlist = input.toString().split(" ");
        l = Math.max(words, 0);
        if (wordlist.length > l) {
          return wordlist.slice(0, l).join(" ") + string;
        } else {
          return input;
        }
      },
      strip_html: function(input) {
        return input.toString().replace(/<.*?>/g, "");
      },
      strip_newlines: function(input) {
        return input.toString().replace(/\n/g, "");
      },
      join: function(input, separator) {
        separator = separator || " ";
        return input.join(separator);
      },
      split: function(input, separator) {
        separator = separator || " ";
        return input.split(separator);
      },
      sort: function(input) {
        return input.sort();
      },
      reverse: function(input) {
        return input.reverse();
      },
      replace: function(input, string, replacement) {
        replacement = replacement || "";
        return input.toString().replace(new RegExp(string, "g"), replacement);
      },
      replace_first: function(input, string, replacement) {
        replacement = replacement || "";
        return input.toString().replace(new RegExp(string, ""), replacement);
      },
      newline_to_br: function(input) {
        return input.toString().replace(/\n/g, "<br/>\n");
      },
      date: function(input, format) {
        var date;
        date = void 0;
        if (input instanceof Date) {
          date = input;
        }
        if ((!(date instanceof Date)) && input === "now") {
          date = new Date();
        }
        if (!(date instanceof Date)) {
          date = new Date(input);
        }
        if (!(date instanceof Date)) {
          date = new Date(Date.parse(input));
        }
        if (!(date instanceof Date)) {
          return input;
        }
        return strftime(format, date);
      },
      first: function(input) {
        return input[0];
      },
      last: function(input) {
        input = input;
        return input[input.length - 1];
      }
    };
    return Liquid.Template.registerFilter(StandardFilters);
  };

}).call(this);
