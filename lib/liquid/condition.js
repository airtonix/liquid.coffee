// Generated by CoffeeScript 1.6.3
(function() {
  var Liquid, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../liquid');

  Liquid.Condition = (function() {
    Condition.operators = {
      "==": function(l, r) {
        return l === r;
      },
      "=": function(l, r) {
        return l === r;
      },
      "!=": function(l, r) {
        return l !== r;
      },
      "<>": function(l, r) {
        return l !== r;
      },
      "<": function(l, r) {
        return l < r;
      },
      ">": function(l, r) {
        return l > r;
      },
      "<=": function(l, r) {
        return l <= r;
      },
      ">=": function(l, r) {
        return l >= r;
      },
      contains: function(l, r) {
        return l.match(r);
      },
      hasKey: function(l, r) {
        return l[r] != null;
      },
      hasValue: function(l, r) {
        var p;
        for (p in l) {
          if (l[p] === r) {
            return true;
          }
        }
        return false;
      }
    };

    function Condition(left, operator, right) {
      this.left = left;
      this.operator = operator;
      this.right = right;
      this.childRelation = null;
      this.childCondition = null;
      this.attachment = null;
    }

    Condition.prototype.evaluate = function(context) {
      var result;
      context = context || new Liquid.Context();
      result = this.interpretCondition(this.left, this.right, this.operator, context);
      switch (this.childRelation) {
        case "or":
          return result || this.childCondition.evaluate(context);
        case "and":
          return result && this.childCondition.evaluate(context);
        default:
          return result;
      }
    };

    Condition.prototype.or = function(condition) {
      this.childRelation = "or";
      return this.childCondition = condition;
    };

    Condition.prototype.and = function(condition) {
      this.childRelation = "and";
      return this.childCondition = condition;
    };

    Condition.prototype.attach = function(attachment) {
      this.attachment = attachment;
      return this.attachment;
    };

    Condition.prototype.isElse = false;

    Condition.prototype.interpretCondition = function(left, right, op, context) {
      var results;
      if (!op) {
        return context.get(left);
      }
      left = context.get(left);
      right = context.get(right);
      op = Condition.operators[op];
      if (!op) {
        throw "Unknown operator " + op;
      }
      results = op(left, right);
      return results;
    };

    Condition.prototype.toString = function() {
      return "<Condition " + this.left + " " + this.operator + " " + this.right + ">";
    };

    return Condition;

  })();

  Liquid.ElseCondition = (function(_super) {
    __extends(ElseCondition, _super);

    function ElseCondition() {
      _ref = ElseCondition.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ElseCondition.prototype.isElse = true;

    ElseCondition.prototype.evaluate = function(context) {
      return true;
    };

    ElseCondition.prototype.toString = function() {
      return "<ElseCondition>";
    };

    return ElseCondition;

  })(Liquid.Condition);

}).call(this);
