!function(e){"object"==typeof exports?module.exports=e():"function"==typeof define&&define.amd?define(e):"undefined"!=typeof window?window.Liquid=e():"undefined"!=typeof global?global.Liquid=e():"undefined"!=typeof self&&(self.Liquid=e())}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1

/*

Copyright (c) 2013 - 2014 Bruce Davidson &lt;darkoverlordofdata@gmail.com&gt;
Copyright (c) 2005, 2006 Tobias Luetke

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

(function() {
  var Liquid;

  module.exports = Liquid = (function() {
    function Liquid() {}

    Liquid.FilterSeparator = /\|/;

    Liquid.ArgumentSeparator = ',';

    Liquid.FilterArgumentSeparator = ':';

    Liquid.VariableAttributeSeparator = '.';

    Liquid.TagStart = /\{\%/;

    Liquid.TagEnd = /\%\}/;

    Liquid.VariableSignature = /\(?[\w\-\.\[\]]\)?/;

    Liquid.VariableSegment = /[\w\-]/;

    Liquid.VariableStart = /\{\{/;

    Liquid.VariableEnd = /\}\}/;

    Liquid.VariableIncompleteEnd = /\}\}?/;

    Liquid.QuotedString = /"[^"]*"|'[^']*'/;

    Liquid.QuotedFragment = RegExp("" + Liquid.QuotedString.source + "|(?:[^\\s,\\|'\"]|" + Liquid.QuotedString.source + ")+");

    Liquid.StrictQuotedFragment = /"[^"]+"|'[^']+'|[^\s|:,]+/;

    Liquid.FirstFilterArgument = RegExp("" + Liquid.FilterArgumentSeparator + "(?:" + Liquid.StrictQuotedFragment.source + ")");

    Liquid.OtherFilterArgument = RegExp("" + Liquid.ArgumentSeparator + "(?:" + Liquid.StrictQuotedFragment.source + ")");

    Liquid.SpacelessFilter = RegExp("^(?:'[^']+'|\"[^\"]+\"|[^'\"])*" + Liquid.FilterSeparator.source + "(?:" + Liquid.StrictQuotedFragment.source + ")(?:" + Liquid.FirstFilterArgument.source + "(?:" + Liquid.OtherFilterArgument.source + ")*)?");

    Liquid.Expression = RegExp("(?:" + Liquid.QuotedFragment.source + "(?:" + Liquid.SpacelessFilter.source + ")*)");

    Liquid.TagAttributes = RegExp("(\\w+)\\s*\\:\\s*(" + Liquid.QuotedFragment.source + ")");

    Liquid.AnyStartingTag = /\{\{|\{\%/;

    Liquid.PartialTemplateParser = RegExp("" + Liquid.TagStart.source + ".*?" + Liquid.TagEnd.source + "|" + Liquid.VariableStart.source + ".*?" + Liquid.VariableIncompleteEnd.source);

    Liquid.TemplateParser = RegExp("(" + Liquid.PartialTemplateParser.source + "|" + Liquid.AnyStartingTag.source + ")");

    Liquid.VariableParser = RegExp("\\[[^\\]]+\\]|" + Liquid.VariableSegment.source + "+\\??");

    Liquid.LiteralShorthand = /^(?:\{\{\{\s?)(.*?)(?:\s*\}\}\})$/;

    return Liquid;

  })();

  require('./liquid/version');

  require('./liquid/drop');

  require('./liquid/errors');

  require('./liquid/interrupts');

  require('./liquid/strainer');

  require('./liquid/context');

  require('./liquid/tag');

  require('./liquid/block');

  require('./liquid/document');

  require('./liquid/variable');

  require('./liquid/filesystem');

  require('./liquid/template');

  require('./liquid/standardfilters');

  require('./liquid/condition');

  Liquid.Tags = (function() {
    function Tags() {}

    return Tags;

  })();

  require('./liquid/tags/assign');

  require('./liquid/tags/block');

  require('./liquid/tags/break');

  require('./liquid/tags/capture');

  require('./liquid/tags/case');

  require('./liquid/tags/comment');

  require('./liquid/tags/continue');

  require('./liquid/tags/cycle');

  require('./liquid/tags/decrement');

  require('./liquid/tags/extends');

  require('./liquid/tags/for');

  require('./liquid/tags/if');

  require('./liquid/tags/ifchanged');

  require('./liquid/tags/include');

  require('./liquid/tags/increment');

  require('./liquid/tags/raw');

  require('./liquid/tags/unless');

}).call(this);

},{"./liquid/block":2,"./liquid/condition":3,"./liquid/context":4,"./liquid/document":5,"./liquid/drop":6,"./liquid/errors":7,"./liquid/filesystem":8,"./liquid/interrupts":9,"./liquid/standardfilters":10,"./liquid/strainer":11,"./liquid/tag":12,"./liquid/tags/assign":13,"./liquid/tags/block":14,"./liquid/tags/break":15,"./liquid/tags/capture":16,"./liquid/tags/case":17,"./liquid/tags/comment":18,"./liquid/tags/continue":19,"./liquid/tags/cycle":20,"./liquid/tags/decrement":21,"./liquid/tags/extends":22,"./liquid/tags/for":23,"./liquid/tags/if":24,"./liquid/tags/ifchanged":25,"./liquid/tags/include":26,"./liquid/tags/increment":27,"./liquid/tags/raw":28,"./liquid/tags/unless":29,"./liquid/template":30,"./liquid/variable":32,"./liquid/version":33}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../liquid');

  Liquid.Block = (function(_super) {
    var ContentOfVariable, FullToken, IsTag, IsVariable;

    __extends(Block, _super);

    IsTag = RegExp("^" + Liquid.TagStart.source);

    IsVariable = RegExp("^" + Liquid.VariableStart.source);

    FullToken = RegExp("^" + Liquid.TagStart.source + "\\s*(\\w+)\\s*(.*)?" + Liquid.TagEnd.source + "$");

    ContentOfVariable = RegExp("^" + Liquid.VariableStart.source + "(.*)" + Liquid.VariableEnd.source + "$");

    function Block(tagName, markup, tokens) {
      this.blockName = tagName;
      this.blockDelimiter = "end" + this.blockName;
      Block.__super__.constructor.call(this, tagName, markup, tokens);
    }

    Block.prototype.parse = function(tokens) {
      var $, tag, token;
      this.nodelist || (this.nodelist = []);
      this.nodelist.length = 0;
      while ((token = tokens.shift()) != null) {
        if (IsTag.test(token)) {
          if ($ = token.match(FullToken)) {
            if (this.blockDelimiter === $[1]) {
              this.endTag();
              return;
            }
            if (tag = Liquid.Template.tags[$[1]]) {
              this.nodelist.push(new tag($[1], $[2], tokens));
            } else {
              this.unknownTag($[1], $[2], tokens);
            }
          } else {
            throw new SyntaxError("Tag '" + token + "' was not properly terminated with regexp: " + Liquid.TagEnd.source + " ");
          }
        } else if (IsVariable.test(token)) {
          this.nodelist.push(this.createVariable(token));
        } else if (token === '') {

        } else {
          this.nodelist.push(token);
        }
      }
      return this.assertMissingDelimitation();
    };

    Block.prototype.endTag = function() {};

    Block.prototype.unknownTag = function(tag, params, tokens) {
      switch (tag) {
        case "else":
          throw new SyntaxError("" + this.blockName + " tag does not expect else tag");
          break;
        case "end":
          throw new SyntaxError("'end' is not a valid delimiter for " + this.blockName + " tags. use " + this.blockDelimiter);
          break;
        default:
          throw new SyntaxError("Unknown tag '" + tag + "'");
      }
    };

    Block.prototype.createVariable = function(token) {
      var content;
      if (content = token.match(ContentOfVariable)) {
        return new Liquid.Variable(content[1]);
      } else {
        throw new Liquid.SyntaxError("Variable '" + token + "' was not properly terminated with regexp: " + Liquid.VariableEnd.source + " ");
      }
    };

    Block.prototype.render = function(context) {
      return this.renderAll(this.nodelist, context);
    };

    Block.prototype.renderAll = function(list, context) {
      var e, output, token, _i, _len;
      output = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        token = list[_i];
        if (context.hasInterrupt()) {
          break;
        }
        try {
          if (token instanceof Liquid.Tags.Continue || token instanceof Liquid.Tags.Break) {
            context.pushInterrupt(token.interrupt);
            break;
          }
          output.push(token.render != null ? token.render(context) : token);
        } catch (_error) {
          e = _error;
          context.handleError(e);
        }
      }
      return output.join('');
    };

    Block.prototype.assertMissingDelimitation = function() {
      throw new Liquid.SyntaxError("" + block_name + " tag was never closed");
    };

    return Block;

  })(Liquid.Tag);

}).call(this);

},{"../liquid":1}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../liquid');

  Liquid.Condition = (function() {
    var compact;

    compact = require('./util').compact;

    Condition.operators = {
      "==": function(l, r) {
        return l === r;
      },
      "=": function(l, r) {
        return l === r;
      },
      "!=": function(l, r) {
        return l !== r;
      },
      "<>": function(l, r) {
        return l !== r;
      },
      "<": function(l, r) {
        return l < r;
      },
      ">": function(l, r) {
        return l > r;
      },
      "<=": function(l, r) {
        return l <= r;
      },
      ">=": function(l, r) {
        return l >= r;
      },
      contains: function(l, r) {
        return l.match(r);
      },
      hasKey: function(l, r) {
        return l[r] != null;
      },
      hasValue: function(l, r) {
        var p;
        for (p in l) {
          if (l[p] === r) {
            return true;
          }
        }
        return false;
      }
    };

    function Condition(left, operator, right) {
      this.left = left;
      this.operator = operator;
      this.right = right;
      this.childRelation = null;
      this.childCondition = null;
      this.attachment = null;
    }

    Condition.prototype.evaluate = function(context) {
      var result;
      if (context == null) {
        context = new Liquid.Context;
      }
      result = this.interpretCondition(this.left, this.right, this.operator, context);
      switch (this.childRelation) {
        case "or":
          return result || this.childCondition.evaluate(context);
        case "and":
          return result && this.childCondition.evaluate(context);
        default:
          return result;
      }
    };

    Condition.prototype.or = function(condition) {
      this.childRelation = "or";
      return this.childCondition = condition;
    };

    Condition.prototype.and = function(condition) {
      this.childRelation = "and";
      return this.childCondition = condition;
    };

    Condition.prototype.attach = function(attachment) {
      return this.attachment = attachment;
    };

    Condition.prototype["else"] = function() {
      return false;
    };

    Condition.prototype.toString = function() {
      return "#<Condition " + (compact([this.left, this.operator, this.right]).join(' ')) + ">";
    };

    Condition.prototype.interpretCondition = function(left, right, op, context) {
      var operation;
      if (op == null) {
        return context.get(left);
      }
      left = context.get(left);
      right = context.get(right);
      operation = Condition.operators[op] || new Liquid.ArgumentError("Unknown operator " + op);
      if (operation.call != null) {
        return operation.call(this, left, right);
      } else {
        return null;
      }
    };

    return Condition;

  })();

  Liquid.ElseCondition = (function(_super) {
    __extends(ElseCondition, _super);

    function ElseCondition() {
      return ElseCondition.__super__.constructor.apply(this, arguments);
    }

    ElseCondition.prototype["else"] = function() {
      return true;
    };

    ElseCondition.prototype.evaluate = function(context) {
      return true;
    };

    return ElseCondition;

  })(Liquid.Condition);

}).call(this);

},{"../liquid":1,"./util":31}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __slice = [].slice;

  Liquid = require('../liquid');

  Liquid.Context = (function() {
    var LITERALS, compact, flatten, _ref;

    LITERALS = {
      'nil': null,
      'null': null,
      '': null,
      'true': true,
      'false': false
    };

    _ref = require('./util'), compact = _ref.compact, flatten = _ref.flatten;

    function Context(environments, outerScope, registers, rethrowErrors) {
      this.environments = flatten([environments]);
      this.scopes = [outerScope || {}];
      this.registers = registers;
      this.errors = [];
      this.rethrowErrors = rethrowErrors;
      this.strainer = Liquid.Strainer.create(this);
      this.interrupts = [];
    }

    Context.prototype.addFilters = function(filters) {
      var f, _i, _len, _results;
      filters = compact(flatten([filters]));
      _results = [];
      for (_i = 0, _len = filters.length; _i < _len; _i++) {
        f = filters[_i];
        if (typeof f !== "function") {
          throw Liquid.ArgumentError("Expected module but got: " + typeof f);
        }
        _results.push(this.strainer.extend(f));
      }
      return _results;
    };

    Context.prototype.hasInterrupt = function() {
      return this.interrupts.length > 0;
    };

    Context.prototype.pushInterrupt = function(e) {
      return this.interrupts.push(e);
    };

    Context.prototype.popInterrupt = function() {
      return this.interrupts.pop();
    };

    Context.prototype.handleError = function(e) {
      this.errors.push(e);
      if (this.rethrowErrors) {
        if (e instanceof Liquid.SyntaxError) {
          throw "Liquid syntax error: " + e.message;
        } else {
          throw "Liquid error: " + e.message;
        }
      }
    };

    Context.prototype.invoke = function() {
      var args, method, _ref1;
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.strainer.respondTo(method)) {
        return (_ref1 = this.strainer)[method].apply(_ref1, args);
      } else {
        return args[0];
      }
    };

    Context.prototype.push = function(newScope) {
      if (newScope == null) {
        newScope = {};
      }
      this.scopes.unshift(newScope);
      if (this.scopes.length > 100) {
        throw new Liquid.StackLevelError("Nesting too deep");
      }
    };

    Context.prototype.merge = function(newScope) {
      var key, val, _results;
      _results = [];
      for (key in newScope) {
        val = newScope[key];
        _results.push(this.scopes[0][key] = val);
      }
      return _results;
    };

    Context.prototype.pop = function() {
      if (this.scopes.length === 1) {
        throw new Liquid.ContextError();
      }
      return this.scopes.shift();
    };

    Context.prototype.stack = function($yield, newScope) {
      if (newScope == null) {
        newScope = {};
      }
      this.push(newScope);
      try {
        return $yield();
      } finally {
        this.pop();
      }
    };

    Context.prototype.clearInstanceAssigns = function() {
      return this.scopes[0] = {};
    };

    Context.prototype.get = function(varname) {
      return this.resolve(varname);
    };

    Context.prototype.set = function(varname, value) {
      return this.scopes[0][varname] = value;
    };

    Context.prototype.hasKey = function(key) {
      return this.resolve(key) != null;
    };

    Context.prototype.resolve = function(key) {
      var $, ch, _i, _j, _ref1, _ref2, _ref3, _ref4, _results, _results1;
      if (LITERALS[key] != null) {
        return LITERALS[key];
      } else {
        if ($ = /^'(.*)'$/.exec(key)) {
          return $[1];
        } else if ($ = /^"(.*)"$/.exec(key)) {
          return $[1];
        } else if ($ = /^(\d+)$/.exec(key)) {
          return parseInt($[1], 10);
        } else if ($ = /^(\d[\d\.]+)$/.exec(key)) {
          return parseFloat($[1]);
        } else if ($ = /^\((\S+)\.\.(\S+)\)$/.exec(key)) {
          if (isNaN($[1])) {
            _results = [];
            for (ch = _i = _ref1 = $[1].charCodeAt(0), _ref2 = $[2].charCodeAt(0); _ref1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; ch = _ref1 <= _ref2 ? ++_i : --_i) {
              _results.push(String.fromCharCode(ch));
            }
            return _results;
          } else {
            return (function() {
              _results1 = [];
              for (var _j = _ref3 = parseInt($[1]), _ref4 = parseInt($[2]); _ref3 <= _ref4 ? _j <= _ref4 : _j >= _ref4; _ref3 <= _ref4 ? _j++ : _j--){ _results1.push(_j); }
              return _results1;
            }).apply(this);
          }
        } else {
          return this.variable(key);
        }
      }
    };

    Context.prototype.findVariable = function(key) {
      var e, s, scope, variable, _i, _j, _len, _len1, _ref1, _ref2;
      _ref1 = this.scopes;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        s = _ref1[_i];
        if (s[key] != null) {
          scope = s;
        }
      }
      if (scope == null) {
        _ref2 = this.environments;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          e = _ref2[_j];
          if (variable = this.lookupAndEvaluate(e, key)) {
            scope = e;
            break;
          }
        }
      }
      scope || (scope = this.environments[this.environments.length - 1] || this.scopes[this.scopes.length - 1]);
      variable || (variable = this.lookupAndEvaluate(scope, key));
      if (variable != null) {
        if (typeof variable.setContext === "function") {
          variable.setContext(this);
        }
      }
      return variable;
    };

    Context.prototype.variable = function(markup) {
      var $, firstPart, object, part, parts, squareBracketed, _i, _len;
      if (typeof markup !== "string") {
        return null;
      }
      parts = markup.match(/\[[^\]]+\]|(?:[\w\-]\??)+/g);
      squareBracketed = /^\[(.*)\]$/;
      firstPart = parts.shift();
      if (($ = squareBracketed.exec(firstPart))) {
        firstPart = this.resolve($[1]);
      }
      if (object = this.findVariable(firstPart)) {
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          if (($ = squareBracketed.exec(part))) {
            part = this.resolve($[1]);
            object = object[part];
          } else {
            if (typeof object === 'object' && part in object) {
              object = this.lookupAndEvaluate(object, part);
            } else if (/^\d+$/.test(part)) {
              object = object[parseInt(part, 10)];
            } else {
              return null;
            }
          }
          if (object != null) {
            if (typeof object.setContext === "function") {
              object.setContext(this);
            }
          }
        }
      }
      return object;
    };

    Context.prototype.lookupAndEvaluate = function(obj, key) {
      var value;
      if (typeof (value = obj[key]) === 'function') {
        return obj[key] = value(this);
      } else {
        return value;
      }
    };

    return Context;

  })();

}).call(this);

},{"../liquid":1,"./util":31}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../liquid');

  Liquid.Document = (function(_super) {
    __extends(Document, _super);

    function Document(tokens) {
      this.blockDelimiter = [];
      this.parse(tokens);
    }

    Document.prototype.assertMissingDelimitation = function() {};

    return Document;

  })(Liquid.Block);

}).call(this);

},{"../liquid":1}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid;

  Liquid = require('../liquid');

  Liquid.Drop = (function() {
    function Drop() {}

    Drop.prototype.setContext = function(context) {
      return this.context = context;
    };

    Drop.prototype.beforeMethod = function(method) {};

    Drop.prototype.invokeDrop = function(method) {
      if ('function' === typeof Drop.prototype[method]) {
        return this[method].apply(this);
      } else {
        return this.beforeMethod(method);
      }
    };

    Drop.prototype.hasKey = function(name) {
      return true;
    };

    return Drop;

  })();

}).call(this);

},{"../liquid":1}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../liquid');

  Liquid.ArgumentError = (function(_super) {
    __extends(ArgumentError, _super);

    function ArgumentError() {
      return ArgumentError.__super__.constructor.apply(this, arguments);
    }

    return ArgumentError;

  })(Error);

  Liquid.ContextError = (function(_super) {
    __extends(ContextError, _super);

    function ContextError() {
      return ContextError.__super__.constructor.apply(this, arguments);
    }

    return ContextError;

  })(Error);

  Liquid.FilterNotFound = (function(_super) {
    __extends(FilterNotFound, _super);

    function FilterNotFound() {
      return FilterNotFound.__super__.constructor.apply(this, arguments);
    }

    return FilterNotFound;

  })(Error);

  Liquid.FileSystemError = (function(_super) {
    __extends(FileSystemError, _super);

    function FileSystemError() {
      return FileSystemError.__super__.constructor.apply(this, arguments);
    }

    return FileSystemError;

  })(Error);

  Liquid.StandardError = (function(_super) {
    __extends(StandardError, _super);

    function StandardError() {
      return StandardError.__super__.constructor.apply(this, arguments);
    }

    return StandardError;

  })(Error);

  Liquid.SyntaxError = (function(_super) {
    __extends(SyntaxError, _super);

    function SyntaxError() {
      return SyntaxError.__super__.constructor.apply(this, arguments);
    }

    return SyntaxError;

  })(Error);

  Liquid.StackLevelError = (function(_super) {
    __extends(StackLevelError, _super);

    function StackLevelError() {
      return StackLevelError.__super__.constructor.apply(this, arguments);
    }

    return StackLevelError;

  })(Error);

  Liquid.MemoryError = (function(_super) {
    __extends(MemoryError, _super);

    function MemoryError() {
      return MemoryError.__super__.constructor.apply(this, arguments);
    }

    return MemoryError;

  })(Error);

}).call(this);

},{"../liquid":1}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid, fs, path;

  fs = require('fs');

  path = require('path');

  Liquid = require('../liquid');

  Liquid.BlankFileSystem = (function() {
    function BlankFileSystem() {}

    BlankFileSystem.prototype.readTemplateFile = function(path) {
      throw "This liquid context does not allow includes.";
    };

    return BlankFileSystem;

  })();

  Liquid.LocalFileSystem = (function() {
    function LocalFileSystem(root) {
      this.root = root;
    }

    LocalFileSystem.prototype.readTemplateFile = function($template) {
      return String(fs.readFileSync(path.resolve(this.root, $template)));
    };

    return LocalFileSystem;

  })();

}).call(this);

},{"../liquid":1,"fs":36,"path":38}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../liquid');

  Liquid.Interrupt = (function() {
    Interrupt.prototype.message = '';

    function Interrupt(message) {
      this.message = message != null ? message : 'interrupt';
    }

    return Interrupt;

  })();

  Liquid.BreakInterrupt = (function(_super) {
    __extends(BreakInterrupt, _super);

    function BreakInterrupt() {
      return BreakInterrupt.__super__.constructor.apply(this, arguments);
    }

    return BreakInterrupt;

  })(Liquid.Interrupt);

  Liquid.ContinueInterrupt = (function(_super) {
    __extends(ContinueInterrupt, _super);

    function ContinueInterrupt() {
      return ContinueInterrupt.__super__.constructor.apply(this, arguments);
    }

    return ContinueInterrupt;

  })(Liquid.Interrupt);

}).call(this);

},{"../liquid":1}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid, strftime;

  strftime = require('strftime');

  Liquid = require('../liquid');

  Liquid.StandardFilters = (function() {
    function StandardFilters() {}

    StandardFilters.size = function(iterable) {
      if (iterable["length"]) {
        return iterable.length;
      } else {
        return 0;
      }
    };

    StandardFilters.downcase = function(input) {
      return input.toString().toLowerCase();
    };

    StandardFilters.upcase = function(input) {
      return input.toString().toUpperCase();
    };

    StandardFilters.capitalize = function(input) {
      var str;
      str = input.toString();
      return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();
    };

    StandardFilters.escape = function(input) {
      input = input.toString();
      input = input.replace(/&/g, "&amp;");
      input = input.replace(/</g, "&lt;");
      input = input.replace(/>/g, "&gt;");
      input = input.replace(/"/g, "&quot;");
      return input;
    };

    StandardFilters.h = function(input) {
      input = input.toString();
      input = input.replace(/&/g, "&amp;");
      input = input.replace(/</g, "&lt;");
      input = input.replace(/>/g, "&gt;");
      input = input.replace(/"/g, "&quot;");
      return input;
    };

    StandardFilters.truncate = function(input, length, string) {
      var seg;
      if (!input || input === "") {
        return "";
      }
      length = length || 50;
      string = string || "...";
      seg = input.slice(0, length);
      if (input.length > length) {
        return input.slice(0, length) + string;
      } else {
        return input;
      }
    };

    StandardFilters.truncatewords = function(input, words, string) {
      var l, wordlist;
      if (!input || input === "") {
        return "";
      }
      words = parseInt(words || 15);
      string = string || "...";
      wordlist = input.toString().split(" ");
      l = Math.max(words, 0);
      if (wordlist.length > l) {
        return wordlist.slice(0, l).join(" ") + string;
      } else {
        return input;
      }
    };

    StandardFilters.truncate_words = function(input, words, string) {
      var l, wordlist;
      if (!input || input === "") {
        return "";
      }
      words = parseInt(words || 15);
      string = string || "...";
      wordlist = input.toString().split(" ");
      l = Math.max(words, 0);
      if (wordlist.length > l) {
        return wordlist.slice(0, l).join(" ") + string;
      } else {
        return input;
      }
    };

    StandardFilters.strip_html = function(input) {
      return input.toString().replace(/<.*?>/g, "");
    };

    StandardFilters.strip_newlines = function(input) {
      return input.toString().replace(/\n/g, "");
    };

    StandardFilters.join = function(input, separator) {
      separator = separator || " ";
      return input.join(separator);
    };

    StandardFilters.split = function(input, separator) {
      separator = separator || " ";
      return input.split(separator);
    };

    StandardFilters.sort = function(input) {
      return input.sort();
    };

    StandardFilters.reverse = function(input) {
      return input.reverse();
    };

    StandardFilters.replace = function(input, string, replacement) {
      replacement = replacement || "";
      return input.toString().replace(new RegExp(string, "g"), replacement);
    };

    StandardFilters.replace_first = function(input, string, replacement) {
      replacement = replacement || "";
      return input.toString().replace(new RegExp(string, ""), replacement);
    };

    StandardFilters.newline_to_br = function(input) {
      return input.toString().replace(/\n/g, "<br/>\n");
    };

    StandardFilters.date = function(input, format) {
      var date;
      date = void 0;
      if (input instanceof Date) {
        date = input;
      }
      if ((!(date instanceof Date)) && input === "now") {
        date = new Date();
      }
      if (!(date instanceof Date)) {
        date = new Date(input);
      }
      if (!(date instanceof Date)) {
        date = new Date(Date.parse(input));
      }
      if (!(date instanceof Date)) {
        return input;
      }
      return strftime(format, date);
    };

    StandardFilters.first = function(input) {
      return input[0];
    };

    StandardFilters.last = function(input) {
      input = input;
      return input[input.length - 1];
    };

    return StandardFilters;

  })();

  Liquid.Template.registerFilter(Liquid.StandardFilters);

}).call(this);

},{"../liquid":1,"strftime":34}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Liquid = require('../liquid');

  Liquid.Strainer = (function() {
    var INTERNAL_METHOD;

    INTERNAL_METHOD = /^__/;

    Strainer.requiredMethods = ['respondTo', 'context', 'extend'];

    Strainer.filters = {};

    function Strainer(context) {
      this.context = context;
    }

    Strainer.globalFilter = function(filter) {
      if (typeof filter !== 'function') {
        throw new Liquid.ArgumentError("Passed filter is not a module");
      }
      return Strainer.filters[filter.name] = filter;
    };

    Strainer.create = function(context) {
      var k, m, strainer, _ref;
      strainer = new Strainer(context);
      _ref = Strainer.filters;
      for (k in _ref) {
        m = _ref[k];
        strainer.extend(m);
      }
      return strainer;
    };

    Strainer.prototype.respondTo = function(methodName) {
      methodName = methodName.toString();
      if (INTERNAL_METHOD.test(methodName)) {
        return false;
      }
      if (__indexOf.call(Strainer.requiredMethods, methodName) >= 0) {
        return false;
      }
      if (this[methodName] != null) {
        return true;
      } else {
        return false;
      }
    };

    Strainer.prototype.extend = function(m) {
      var name, val, _results;
      _results = [];
      for (name in m) {
        val = m[name];
        if (this[name] == null) {
          _results.push(this[name] = val);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Strainer;

  })();

}).call(this);

},{"../liquid":1}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid;

  Liquid = require('../liquid');

  Liquid.Tag = (function() {
    function Tag(tagName, markup, tokens) {
      this.tagName = tagName;
      this.markup = markup;
      this.nodelist = this.nodelist || [];
      this.parse(tokens);
    }

    Tag.prototype.parse = function(tokens) {};

    Tag.prototype.render = function(context) {
      return "";
    };

    return Tag;

  })();

}).call(this);

},{"../liquid":1}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Assign = (function(_super) {
    var Syntax;

    __extends(Assign, _super);

    Syntax = RegExp("((?:" + Liquid.VariableSignature.source + ")+)\\s*=\\s*((?:" + Liquid.StrictQuotedFragment.source + ")+)");

    function Assign(tagName, markup, tokens) {
      var $;
      if ($ = markup.match(Syntax)) {
        this.to = $[1];
        this.from = $[2];
      } else {
        throw new Liquid.SyntaxError("Syntax error in 'assign' - Valid syntax: assign [var] = [source]");
      }
      Assign.__super__.constructor.call(this, tagName, markup, tokens);
    }

    Assign.prototype.render = function(context) {
      var last;
      last = context.scopes.length - 1;
      context.scopes[last][this.to] = context.get(this.from);
      return "";
    };

    return Assign;

  })(Liquid.Tag);

  Liquid.Template.registerTag("assign", Liquid.Tags.Assign);

}).call(this);

},{"../../liquid":1}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.BlockDrop = (function(_super) {
    __extends(BlockDrop, _super);

    function BlockDrop(block) {
      this.block = block;
      Object.defineProperty(this, 'super', {
        get: function() {
          return this.block.callSuper(this.context);
        }
      });
    }

    return BlockDrop;

  })(Liquid.Drop);

  Liquid.Tags.Block = (function(_super) {
    var Syntax;

    __extends(Block, _super);

    Syntax = /(\w)+/;

    Block.prototype.parent = null;

    Block.prototype.name = '';

    function Block(tagName, markup, tokens) {
      var $;
      if ($ = markup.match(Syntax)) {
        this.name = $[1];
      } else {
        throw new Liquid.SyntaxError("Syntax Error in 'block' - Valid syntax: block [name]");
      }
      if (tokens != null) {
        Block.__super__.constructor.call(this, tagName, markup, tokens);
      }
    }

    Block.prototype.render = function(context) {
      return context.stack((function(_this) {
        return function() {
          context.set('block', new Liquid.Tags.BlockDrop(_this));
          return _this.renderAll(_this.nodelist, context);
        };
      })(this));
    };

    Block.prototype.addParent = function(nodelist) {
      if (this.parent != null) {
        return this.parent.addParent(nodelist);
      } else {
        this.parent = new Block(this.tagName, this.name);
        return this.parent.nodelist = nodelist;
      }
    };

    Block.prototype.callSuper = function(context) {
      if (this.parent != null) {
        return this.parent.render(context);
      } else {
        return '';
      }
    };

    return Block;

  })(Liquid.Block);

  Liquid.Template.registerTag("block", Liquid.Tags.Block);

}).call(this);

},{"../../liquid":1}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Break = (function(_super) {
    __extends(Break, _super);

    function Break() {
      return Break.__super__.constructor.apply(this, arguments);
    }

    Break.prototype.interrupt = function() {
      return new Liquid.BreakInterrupt;
    };

    return Break;

  })(Liquid.Tag);

  Liquid.Template.registerTag("break", Liquid.Tags.Break);

}).call(this);

},{"../../liquid":1}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Capture = (function(_super) {
    var Syntax;

    __extends(Capture, _super);

    Syntax = /(\w+)/;

    function Capture(tagName, markup, tokens) {
      var $;
      if ($ = markup.match(Syntax)) {
        this.to = $[1];
      } else {
        throw new Liquid.SyntaxError("Syntax error in 'capture' - Valid syntax: capture [var]");
      }
      Capture.__super__.constructor.call(this, tagName, markup, tokens);
    }

    Capture.prototype.render = function(context) {
      var last, output;
      output = Capture.__super__.render.call(this, context);
      last = context.scopes.length - 1;
      context.scopes[last][this.to] = output;
      return '';
    };

    return Capture;

  })(Liquid.Block);

  Liquid.Template.registerTag("capture", Liquid.Tags.Capture);

}).call(this);

},{"../../liquid":1}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Case = (function(_super) {
    var Syntax, WhenSyntax;

    __extends(Case, _super);

    Syntax = RegExp("(" + Liquid.StrictQuotedFragment.source + ")");

    WhenSyntax = RegExp("(" + Liquid.StrictQuotedFragment.source + ")(?:(?:\\s+or\\s+|\\s*\\,\\s*)(" + Liquid.StrictQuotedFragment.source + ".*))?");

    function Case(tagName, markup, tokens) {
      var $;
      this.blocks = [];
      this.nodelist = [];
      if ($ = markup.match(Syntax)) {
        this.left = $[1];
      } else {
        throw new Liquid.SyntaxError("Syntax error in 'case' - Valid syntax: case [condition]");
      }
      Case.__super__.constructor.call(this, tagName, markup, tokens);
    }

    Case.prototype.unknownTag = function(tag, markup, tokens) {
      this.nodelist = [];
      switch (tag) {
        case "when":
          return this.recordWhenCondition(markup);
        case "else":
          return this.recordElseCondition(markup);
        default:
          return Case.__super__.unknownTag.call(this, tag, markup, tokens);
      }
    };

    Case.prototype.render = function(context) {
      var output;
      output = '';
      context.stack((function(_this) {
        return function() {
          var block, execElseBlock, _i, _len, _ref, _results;
          execElseBlock = true;
          _ref = _this.blocks;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            block = _ref[_i];
            if (block["else"]()) {
              if (execElseBlock === true) {
                _results.push(output += _this.renderAll(block.attachment, context));
              } else {
                _results.push(void 0);
              }
            } else if (block.evaluate(context)) {
              execElseBlock = false;
              _results.push(output += _this.renderAll(block.attachment, context));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      return output;
    };

    Case.prototype.recordWhenCondition = function(markup) {
      var $, block, _results;
      _results = [];
      while (markup) {
        if (!($ = markup.match(WhenSyntax))) {
          throw new Liquid.SyntaxError("Syntax error in tag 'case' - Valid when condition: {% when [condition] [or condition2...] %} ");
        }
        markup = $[2];
        block = new Liquid.Condition(this.left, "==", $[1]);
        block.attach(this.nodelist);
        _results.push(this.blocks.push(block));
      }
      return _results;
    };

    Case.prototype.recordElseCondition = function(markup) {
      var block;
      if ((markup || "").trim() !== "") {
        if ((markup || "").trim() !== "") {
          throw new Liquid.SyntaxError("Syntax error in tag 'case' - Valid else condition: {% else %} (no parameters) ");
        }
      }
      block = new Liquid.ElseCondition();
      block.attach(this.nodelist);
      return this.blocks.push(block);
    };

    return Case;

  })(Liquid.Block);

  Liquid.Template.registerTag("case", Liquid.Tags.Case);

}).call(this);

},{"../../liquid":1}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Comment = (function(_super) {
    __extends(Comment, _super);

    function Comment() {
      return Comment.__super__.constructor.apply(this, arguments);
    }

    Comment.prototype.render = function(context) {
      return "";
    };

    return Comment;

  })(Liquid.Block);

  Liquid.Template.registerTag("comment", Liquid.Tags.Comment);

}).call(this);

},{"../../liquid":1}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Continue = (function(_super) {
    __extends(Continue, _super);

    function Continue() {
      return Continue.__super__.constructor.apply(this, arguments);
    }

    Continue.prototype.interrupt = function() {
      return new Liquid.ContinueInterrupt;
    };

    return Continue;

  })(Liquid.Tag);

  Liquid.Template.registerTag("continue", Liquid.Tags.Continue);

}).call(this);

},{"../../liquid":1}],20:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Cycle = (function(_super) {
    var NamedSyntax, SimpleSyntax;

    __extends(Cycle, _super);

    SimpleSyntax = RegExp("^" + Liquid.StrictQuotedFragment.source);

    NamedSyntax = RegExp("^(" + Liquid.StrictQuotedFragment.source + ")\\s*\\:\\s*(.*)");

    function Cycle(tag, markup, tokens) {
      var $;
      if ($ = markup.match(NamedSyntax)) {
        this.variables = this.variablesFromString($[2]);
        this.name = $[1];
      } else if ($ = markup.match(SimpleSyntax)) {
        this.variables = this.variablesFromString(markup);
        this.name = "'" + (this.variables.toString()) + "'";
      } else {
        throw new Liquid.SyntaxError("Syntax error in 'cycle' - Valid syntax: cycle [name :] var [, var2, var3 ...]");
      }
      Cycle.__super__.constructor.call(this, tag, markup, tokens);
    }

    Cycle.prototype.render = function(context) {
      var output, _base;
      (_base = context.registers).cycle || (_base.cycle = {});
      output = '';
      context.stack((function(_this) {
        return function() {
          var iteration, key, result, _ref;
          key = context.get(_this.name);
          iteration = (_ref = context.registers.cycle[key]) != null ? _ref : 0;
          result = context.get(_this.variables[iteration]);
          iteration += 1;
          if (iteration >= _this.variables.length) {
            iteration = 0;
          }
          context.registers.cycle[key] = iteration;
          return output = result;
        };
      })(this));
      return output;
    };

    Cycle.prototype.variablesFromString = function(markup) {
      var $, varname, _i, _len, _ref, _results;
      _ref = markup.split(',');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        varname = _ref[_i];
        $ = varname.match(RegExp("\\s*(" + Liquid.StrictQuotedFragment.source + ")\\s*"));
        if ($[1]) {
          _results.push($[1]);
        } else {
          _results.push(null);
        }
      }
      return _results;
    };

    return Cycle;

  })(Liquid.Tag);

  Liquid.Template.registerTag("cycle", Liquid.Tags.Cycle);

}).call(this);

},{"../../liquid":1}],21:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Decrement = (function(_super) {
    __extends(Decrement, _super);

    function Decrement(tagName, markup, tokens) {
      this.variable = markup.trim();
      Decrement.__super__.constructor.call(this, tagName, markup, tokens);
    }

    Decrement.prototype.render = function(context) {
      var value, _base, _name;
      value = (_base = context.scopes[0])[_name = this.variable] || (_base[_name] = 0);
      value = value - 1;
      context.scopes[0][this.variable] = value;
      return value.toString();
    };

    return Decrement;

  })(Liquid.Tag);

  Liquid.Template.registerTag("decrement", Liquid.Tags.Decrement);

}).call(this);

},{"../../liquid":1}],22:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Extends = (function(_super) {
    var ContentOfVariable, FullToken, IsTag, IsVariable, Syntax;

    __extends(Extends, _super);

    Syntax = RegExp("(" + Liquid.QuotedFragment.source + ")");

    IsTag = RegExp("^" + Liquid.TagStart.source);

    IsVariable = RegExp("^" + Liquid.VariableStart.source);

    FullToken = RegExp("^" + Liquid.TagStart.source + "\\s*(\\w+)\\s*(.*)?" + Liquid.TagEnd.source + "$");

    ContentOfVariable = RegExp("^" + Liquid.VariableStart.source + "(.*)" + Liquid.VariableEnd.source + "$");

    function Extends(tagName, markup, tokens) {
      var $, m, node, _i, _len, _ref;
      if (($ = markup.match(Syntax))) {
        this.templateName = $[1];
      } else {
        throw new Liquid.SyntaxError("Syntax Error in 'extends' - Valid syntax: extends [template]");
      }
      Extends.__super__.constructor.apply(this, arguments);
      m = {};
      _ref = this.nodelist;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (node instanceof Liquid.Tags.Block) {
          m[node.name] = node;
        }
      }
      this.blocks = m;
    }

    Extends.prototype.parse = function(tokens) {
      return this.parseAll(tokens);
    };

    Extends.prototype.render = function(context) {
      var block, name, parentBlocks, pb, template, _ref;
      template = this.loadTemplate(context);
      parentBlocks = this.findBlocks(template.root);
      _ref = this.blocks;
      for (name in _ref) {
        block = _ref[name];
        if ((pb = parentBlocks[name]) != null) {
          pb.parent = block.parent;
          pb.addParent(pb.nodelist);
          pb.nodelist = block.nodelist;
        } else {
          if (this.isExtending(template)) {
            template.root.nodelist.push(block);
          }
        }
      }
      return template.render(context);
    };

    Extends.prototype.parseAll = function(tokens) {
      var $, tag, token, _results;
      this.nodelist || (this.nodelist = []);
      this.nodelist.length = 0;
      _results = [];
      while ((token = tokens.shift()) != null) {
        if (IsTag.test(token)) {
          if (($ = token.match(FullToken))) {
            if (tag = Liquid.Template.tags[$[1]]) {
              _results.push(this.nodelist.push(new tag($[1], $[2], tokens)));
            } else {
              _results.push(this.unknownTag($[1], $[2], tokens));
            }
          } else {
            throw new Liquid.SyntaxError("Tag '" + token + "' was not properly terminated with regexp: " + TagEnd.inspect + " ");
          }
        } else if (IsVariable.test(token)) {
          _results.push(this.nodelist.push(this.createVariable(token)));
        } else if (token === '') {

        } else {
          _results.push(this.nodelist.push(token));
        }
      }
      return _results;
    };

    Extends.prototype.loadTemplate = function(context) {
      var source;
      source = Liquid.Template.fileSystem.readTemplateFile(context.get(this.templateName));
      return Liquid.Template.parse(source);
    };

    Extends.prototype.findBlocks = function(node, blocks) {
      var b, _i, _len, _ref;
      if (blocks == null) {
        blocks = {};
      }
      if (node.nodelist != null) {
        b = blocks;
        _ref = node.nodelist;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (node instanceof Liquid.Tags.Block) {
            b[node.name] = node;
          } else {
            this.findBlocks(node, b);
          }
          b;
        }
      }
      return blocks;
    };

    Extends.prototype.isExtending = function(template) {
      var node, _i, _len, _ref;
      _ref = template.root.nodelist;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (node instanceof Extends) {
          return true;
        }
      }
      return false;
    };

    return Extends;

  })(Liquid.Block);

  Liquid.Template.registerTag("extends", Liquid.Tags.Extends);

}).call(this);

},{"../../liquid":1}],23:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.For = (function(_super) {
    var Syntax;

    __extends(For, _super);

    Syntax = RegExp("(\\w+)\\s+in\\s+(" + Liquid.StrictQuotedFragment.source + ")\\s*(reversed)?");

    function For(tag, markup, tokens) {
      var $;
      if ($ = markup.match(Syntax)) {
        this.variableName = $[1];
        this.collectionName = $[2];
        this.name = "" + $[1] + "-" + $[2];
        this.reversed = $[3];
        this.attributes = {};
        markup.replace(Liquid.TagAttributes, (function(_this) {
          return function($0, key, value) {
            return _this.attributes[key] = value;
          };
        })(this));
      } else {
        throw new Liquid.SyntaxError("Syntax Error in 'for loop' - Valid syntax: for [item] in [collection]");
      }
      For.__super__.constructor.call(this, tag, markup, tokens);
    }

    For.prototype.render = function(context) {
      var collection, from, length, limit, result, segment, to;
      if (context.registers["for"] == null) {
        context.registers["for"] = {};
      }
      collection = context.get(this.collectionName);
      if (!Array.isArray(collection)) {
        return '';
      }
      from = this.attributes['offset'] === 'continue' ? context.registers["for"][this.name] : context.get(this.attributes['offset']);
      limit = context.get(this.attributes['limit']);
      to = limit ? limit + from : collection.length;
      segment = collection.slice(from, to);
      if (segment.length === 0) {
        return '';
      }
      if (this.reversed) {
        segment.reverse();
      }
      result = '';
      length = segment.length;
      context.registers["for"][this.name] = from + segment.length;
      context.stack((function(_this) {
        return function() {
          var index, interrupt, item, _i, _len, _results;
          _results = [];
          for (index = _i = 0, _len = segment.length; _i < _len; index = ++_i) {
            item = segment[index];
            context.set(_this.variableName, item);
            context.set('forloop', {
              name: _this.name,
              length: length,
              index: index + 1,
              index0: index,
              rindex: length - index,
              rindex0: length - index - 1,
              first: index === 0,
              last: index === length - 1
            });
            result += _this.renderAll(_this.nodelist, context);
            if (context.hasInterrupt()) {
              interrupt = context.popInterrupt();
              if (interrupt instanceof Liquid.BreakInterrupt) {
                break;
              }
              if (interrupt instanceof Liquid.ContinueInterrupt) {
                continue;
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      return result;
    };

    return For;

  })(Liquid.Block);

  Liquid.Template.registerTag("for", Liquid.Tags.For);

}).call(this);

},{"../../liquid":1}],24:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.If = (function(_super) {
    var ExpressionsAndOperators, Syntax, SyntaxHelp;

    __extends(If, _super);

    SyntaxHelp = "Syntax Error in tag 'if' - Valid syntax: if [expression]";

    Syntax = RegExp("(" + Liquid.StrictQuotedFragment.source + ")\\s*([=!<>a-z_]+)?\\s*(" + Liquid.StrictQuotedFragment.source + ")?");

    ExpressionsAndOperators = RegExp("(?:\\b(?:\\s?and\\s?|\\s?or\\s?)\\b|(?:\\s*(?!\\b(?:\\s?and\\s?|\\s?or\\s?)\\b)(?:" + Liquid.StrictQuotedFragment.source + "|\\S+)\\s*)+)", "g");

    function If(tag, markup, tokens) {
      this.nodelist = [];
      this.blocks = [];
      this.pushBlock("if", markup);
      If.__super__.constructor.call(this, tag, markup, tokens);
    }

    If.prototype.unknownTag = function(tag, markup, tokens) {
      if (tag === "elsif" || tag === "else") {
        return this.pushBlock(tag, markup);
      } else {
        return If.__super__.unknownTag.call(this, tag, markup, tokens);
      }
    };

    If.prototype.render = function(context) {
      var output;
      output = '';
      context.stack((function(_this) {
        return function() {
          var block, _i, _len, _ref;
          _ref = _this.blocks;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            block = _ref[_i];
            if (block.evaluate(context)) {
              output = _this.renderAll(block.attachment, context);
              return;
            }
          }
          return '';
        };
      })(this));
      return output;
    };

    If.prototype.pushBlock = function(tag, markup) {
      var $, block, condition, expressions, newCondition, operator;
      block = (function() {
        if (tag === 'else') {
          return new Liquid.ElseCondition;
        } else {
          expressions = markup.match(ExpressionsAndOperators).reverse();
          if (!($ = expressions.shift().match(Syntax))) {
            throw new Liquid.SyntaxError(SyntaxHelp);
          }
          condition = new Liquid.Condition($[1], $[2], $[3]);
          while (expressions.length > 0) {
            operator = expressions.shift();
            if (!expressions.shift().match(Syntax)) {
              throw new Liquid.SyntaxError(SyntaxHelp);
            }
            newCondition = new Liquid.Condition($[1], $[2], $[3]);
            newCondition[operator](condition);
            condition = newCondition;
          }
          return condition;
        }
      })();
      this.blocks.push(block);
      return this.nodelist = block.attach([]);
    };

    return If;

  })(Liquid.Block);

  Liquid.Template.registerTag("if", Liquid.Tags.If);

}).call(this);

},{"../../liquid":1}],25:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.IfChanged = (function(_super) {
    __extends(IfChanged, _super);

    function IfChanged() {
      return IfChanged.__super__.constructor.apply(this, arguments);
    }

    IfChanged.prototype.render = function(context) {
      var output;
      output = "";
      context.stack((function(_this) {
        return function() {
          output = _this.renderAll(_this.nodelist, context);
          if (output !== context.registers.ifchanged) {
            return context.registers.ifchanged = output;
          } else {
            return output = '';
          }
        };
      })(this));
      return output;
    };

    return IfChanged;

  })(Liquid.Block);

  Liquid.Template.registerTag("ifchanged", Liquid.Tags.IfChanged);

}).call(this);

},{"../../liquid":1}],26:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Include, Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Include = (function(_super) {
    var Syntax;

    __extends(Include, _super);

    Syntax = RegExp("(" + Liquid.StrictQuotedFragment.source + ")(\\s+(?:with|for)\\s+(" + Liquid.StrictQuotedFragment.source + "))?");

    function Include(tag, markup, tokens) {
      var $;
      if ($ = markup.match(Syntax)) {
        this.templateName = $[1];
        this.variableName = $[3];
        this.attributes = {};
        markup.replace(Liquid.TagAttributes, (function(_this) {
          return function(key, value) {
            var _ref;
            _ref = key.split(':'), key = _ref[0], value = _ref[1];
            return _this.attributes[key] = value;
          };
        })(this));
      } else {
        throw new Liquid.SyntaxError("Error in tag 'include' - Valid syntax: include '[template]' (with|for) [object|collection]");
      }
      Include.__super__.constructor.call(this, tag, markup, tokens);
    }

    Include.prototype.render = function(context) {
      var output, partial, source, variable;
      source = Include.readTemplateFromFileSystem(context, this.templateName);
      partial = Liquid.Template.parse(source);
      variable = context.get(this.variableName || this.templateName.slice(1, -1));
      output = '';
      context.stack((function(_this) {
        return function() {
          var key, v, value, _i, _len, _ref, _results;
          _ref = _this.attributes;
          for (key in _ref) {
            value = _ref[key];
            context.set(key, context.get(value));
          }
          if (variable instanceof Array) {
            output = '';
            _results = [];
            for (_i = 0, _len = variable.length; _i < _len; _i++) {
              v = variable[_i];
              context.set(_this.templateName.slice(1, -1), v);
              _results.push(output += partial.render(context));
            }
            return _results;
          } else {
            context.set(_this.templateName.slice(1, -1), variable);
            return output = partial.render(context);
          }
        };
      })(this));
      return output;
    };

    Include.readTemplateFromFileSystem = function(context, templateName) {
      var fileSystem;
      fileSystem = context.registers.fileSystem || Liquid.Template.fileSystem;
      return fileSystem.readTemplateFile(context.get(templateName));
    };

    return Include;

  })(Liquid.Tag);

  Liquid.Template.registerTag("include", Include);

}).call(this);

},{"../../liquid":1}],27:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Increment = (function(_super) {
    __extends(Increment, _super);

    function Increment(tagName, markup, tokens) {
      this.variable = markup.trim();
      Increment.__super__.constructor.call(this, tagName, markup, tokens);
    }

    Increment.prototype.render = function(context) {
      var value, _base, _name;
      value = (_base = context.scopes[0])[_name = this.variable] || (_base[_name] = 0);
      value = value + 1;
      context.scopes[0][this.variable] = value;
      return value.toString();
    };

    return Increment;

  })(Liquid.Tag);

  Liquid.Template.registerTag("increment", Liquid.Tags.Increment);

}).call(this);

},{"../../liquid":1}],28:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Raw = (function(_super) {
    var FullToken;

    __extends(Raw, _super);

    FullToken = RegExp("^" + Liquid.TagStart.source + "\\s*(\\w+)\\s*(.*)?" + Liquid.TagEnd.source + "$");

    function Raw(tag, markup, tokens) {
      Raw.__super__.constructor.call(this, tag, markup, tokens);
    }

    Raw.prototype.parse = function(tokens) {
      var $, token;
      this.nodelist || (this.nodelist = []);
      this.nodelist.length = 0;
      while ((token = tokens.shift()) != null) {
        if ($ = token.match(FullToken)) {
          if (this.blockDelimiter === $[1]) {
            this.endTag();
            return;
          }
        }
        if (typeof token !== "undefined" && token !== null) {
          this.nodelist.push(token);
        }
      }
    };

    return Raw;

  })(Liquid.Block);

  Liquid.Template.registerTag("raw", Liquid.Tags.Raw);

}).call(this);

},{"../../liquid":1}],29:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require('../../liquid');

  Liquid.Tags.Unless = (function(_super) {
    __extends(Unless, _super);

    function Unless() {
      return Unless.__super__.constructor.apply(this, arguments);
    }

    Unless.prototype.render = function(context) {
      var output;
      output = '';
      context.stack((function(_this) {
        return function() {
          var block, _i, _len, _ref;
          block = _this.blocks[0];
          if (!block.evaluate(context)) {
            output = _this.renderAll(block.attachment, context);
            return;
          }
          _ref = _this.blocks.slice(1);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            block = _ref[_i];
            if (block.evaluate(context)) {
              output = _this.renderAll(block.attachment, context);
              return;
            }
          }
          return '';
        };
      })(this));
      return output;
    };

    return Unless;

  })(Liquid.Tags.If);

  Liquid.Template.registerTag("unless", Liquid.Tags.Unless);

}).call(this);

},{"../../liquid":1}],30:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __slice = [].slice;

  Liquid = require('../liquid');

  Liquid.Template = (function() {
    Template.fileSystem = new Liquid.BlankFileSystem();

    Template.tags = {};

    Template.registerTag = function(name, klass) {
      return Liquid.Template.tags[name] = klass;
    };

    Template.registerFilter = function(mod) {
      return Liquid.Strainer.globalFilter(mod);
    };

    Template.parse = function(source) {
      var template;
      template = new Liquid.Template;
      template.parse(source);
      return template;
    };

    function Template() {
      this.root = null;
      this.registers = {};
      this.assigns = {};
      this.instanceAssigns = {};
      this.errors = [];
      this.rethrowErrors = false;
    }

    Template.prototype.parse = function(src) {
      this.root = new Liquid.Document(Liquid.Template.tokenize(src));
      return this;
    };

    Template.prototype.render = function() {
      var args, context, key, last, options, result, val, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.root === null) {
        return '';
      }
      context = (function() {
        if (args[0] instanceof Liquid.Context) {
          return args.shift();
        } else if (args[0] instanceof Object) {
          return new Liquid.Context([args.shift(), this.assigns], this.instanceAssigns, this.registers, this.rethrowErrors);
        } else if (args[0] == null) {
          return new Liquid.Context(this.assigns, this.instanceAssigns, this.registers, this.rethrowErrors);
        } else {
          throw new Liquid.ArgumentErro("Expect Hash or Liquid::Context as parameter");
        }
      }).call(this);
      last = args.length - 1;
      if (args[last] instanceof Object) {
        options = args.pop();
        if ('registers' in options) {
          _ref = options.registers;
          for (key in _ref) {
            val = _ref[key];
            this.registers[key] = val;
          }
        }
        if ('filters' in options) {
          context.addFilters(options.filters);
        }
      } else if (args[last] instanceof Function) {
        context.addFilters(args.pop());
      } else if (args[last] instanceof Array) {
        context.addFilters(args.pop());
      }
      try {
        result = this.root.render(context);
        if (result.join != null) {
          return result.join('');
        } else {
          return result;
        }
      } catch (_error) {
        return this.errors = context.errors;
      }
    };

    Template.prototype.renderWithErrors = function() {
      var res, savedRethrowErrors;
      savedRethrowErrors = this.rethrowErrors;
      this.rethrowErrors = true;
      res = this.render.apply(this, arguments);
      this.rethrowErrors = savedRethrowErrors;
      return res;
    };

    Template.tokenize = function(source) {
      var tokens;
      if (source == null) {
        source = '';
      }
      if (source.source != null) {
        source = source.source;
      }
      if (source === '') {
        return [];
      }
      tokens = source.split(Liquid.TemplateParser);
      if (tokens[0] === '') {
        tokens.shift();
      }
      return tokens;
    };

    return Template;

  })();

}).call(this);

},{"../liquid":1}],31:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var compact, flatten;

  compact = function($this) {
    var $that, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = $this.length; _i < _len; _i++) {
      $that = $this[_i];
      if ($that) {
        _results.push($that);
      }
    }
    return _results;
  };

  flatten = function($list) {
    var $a, $item, _i, _len;
    if ($list == null) {
      return [];
    }
    $a = [];
    for (_i = 0, _len = $list.length; _i < _len; _i++) {
      $item = $list[_i];
      if (Array.isArray($item)) {
        $a = $a.concat(flatten($item));
      } else {
        $a.push($item);
      }
    }
    return $a;
  };

  module.exports = {
    compact: compact,
    flatten: flatten
  };

}).call(this);

},{}],32:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid,
    __slice = [].slice;

  Liquid = require('../liquid');

  Liquid.Variable = (function() {
    var FilterParser, compact, flatten, _ref;

    FilterParser = RegExp("(?:" + Liquid.FilterSeparator.source + "|(?:\\s*(?!(?:" + Liquid.FilterSeparator.source + "))(?:" + Liquid.QuotedFragment.source + "|\\S+)\\s*)+)");

    _ref = require('./util'), compact = _ref.compact, flatten = _ref.flatten;

    function Variable(markup) {
      var f, filterargs, filtername, filters, match, matches, _i, _len;
      this.markup = markup;
      this.name = null;
      this.filters = [];
      if (match = markup.match(RegExp("\\s*(" + Liquid.QuotedFragment.source + ")(.*)"))) {
        this.name = match[1];
        if (match[2].match(RegExp("" + Liquid.FilterSeparator.source + "\\s*(.*)"))) {
          filters = match[2].match(RegExp("" + FilterParser.source, "g"));
          for (_i = 0, _len = filters.length; _i < _len; _i++) {
            f = filters[_i];
            if (matches = f.match(/\s*(\w+)/)) {
              filtername = matches[1];
              filterargs = f.split(RegExp("(?:" + Liquid.FilterArgumentSeparator + "|" + Liquid.ArgumentSeparator + ")\\s*(" + Liquid.QuotedFragment.source + ")"));
              filterargs.shift();
              filterargs.pop();
              this.filters.push([filtername, compact(flatten(filterargs))]);
            }
          }
        }
      }
    }

    Variable.prototype.render = function(context) {
      var a, e, filter, filterargs, output, _i, _j, _len, _len1, _ref1, _ref2;
      if (this.name == null) {
        return '';
      }
      output = context.get(this.name);
      _ref1 = this.filters;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        filter = _ref1[_i];
        filterargs = [];
        _ref2 = filter[1];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          a = _ref2[_j];
          filterargs.push(context.get(a));
        }
        try {
          output = context.invoke.apply(context, [filter[0], output].concat(__slice.call(filterargs)));
        } catch (_error) {
          e = _error;
          throw new Liquid.FilterNotFound("Error - filter '" + filter[0] + "' in '" + (this.markup.trim()) + "' could not be found.");
        }
      }
      return output;
    };

    return Variable;

  })();

}).call(this);

},{"../liquid":1,"./util":31}],33:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid;

  Liquid = require('../liquid');

  Liquid.VERSION = require('../../package.json').version;

}).call(this);

},{"../../package.json":35,"../liquid":1}],34:[function(require,module,exports){
//
// strftime
// github.com/samsonjs/strftime
// @_sjs
//
// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>
//
// MIT License
// http://sjs.mit-license.org
//

;(function() {

  //// Where to export the API
  var namespace;

  // CommonJS / Node module
  if (typeof module !== 'undefined') {
    namespace = module.exports = strftime;
  }

  // Browsers and other environments
  else {
    // Get the global object. Works in ES3, ES5, and ES5 strict mode.
    namespace = (function(){ return this || (1,eval)('this') }());
  }

  function words(s) { return (s || '').split(' '); }

  var DefaultLocale =
  { days: words('Sunday Monday Tuesday Wednesday Thursday Friday Saturday')
  , shortDays: words('Sun Mon Tue Wed Thu Fri Sat')
  , months: words('January February March April May June July August September October November December')
  , shortMonths: words('Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec')
  , AM: 'AM'
  , PM: 'PM'
  , am: 'am'
  , pm: 'pm'
  };

  namespace.strftime = strftime;
  function strftime(fmt, d, locale) {
    return _strftime(fmt, d, locale);
  }

  // locale is optional
  namespace.strftimeTZ = strftime.strftimeTZ = strftimeTZ;
  function strftimeTZ(fmt, d, locale, timezone) {
    if (typeof locale == 'number' && timezone == null) {
      timezone = locale;
      locale = undefined;
    }
    return _strftime(fmt, d, locale, { timezone: timezone });
  }

  namespace.strftimeUTC = strftime.strftimeUTC = strftimeUTC;
  function strftimeUTC(fmt, d, locale) {
    return _strftime(fmt, d, locale, { utc: true });
  }

  namespace.localizedStrftime = strftime.localizedStrftime = localizedStrftime;
  function localizedStrftime(locale) {
    return function(fmt, d, options) {
      return strftime(fmt, d, locale, options);
    };
  }

  // d, locale, and options are optional, but you can't leave
  // holes in the argument list. If you pass options you have to pass
  // in all the preceding args as well.
  //
  // options:
  //   - locale   [object] an object with the same structure as DefaultLocale
  //   - timezone [number] timezone offset in minutes from GMT
  function _strftime(fmt, d, locale, options) {
    options = options || {};

    // d and locale are optional so check if d is really the locale
    if (d && !quacksLikeDate(d)) {
      locale = d;
      d = undefined;
    }
    d = d || new Date();

    locale = locale || DefaultLocale;
    locale.formats = locale.formats || {};

    // Hang on to this Unix timestamp because we might mess with it directly below.
    var timestamp = d.getTime();

    if (options.utc || typeof options.timezone == 'number') {
      d = dateToUTC(d);
    }

    if (typeof options.timezone == 'number') {
      d = new Date(d.getTime() + (options.timezone * 60000));
    }

    // Most of the specifiers supported by C's strftime, and some from Ruby.
    // Some other syntax extensions from Ruby are supported: %-, %_, and %0
    // to pad with nothing, space, or zero (respectively).
    return fmt.replace(/%([-_0]?.)/g, function(_, c) {
      var mod, padding;
      if (c.length == 2) {
        mod = c[0];
        // omit padding
        if (mod == '-') {
          padding = '';
        }
        // pad with space
        else if (mod == '_') {
          padding = ' ';
        }
        // pad with zero
        else if (mod == '0') {
          padding = '0';
        }
        else {
          // unrecognized, return the format
          return _;
        }
        c = c[1];
      }
      switch (c) {
        case 'A': return locale.days[d.getDay()];
        case 'a': return locale.shortDays[d.getDay()];
        case 'B': return locale.months[d.getMonth()];
        case 'b': return locale.shortMonths[d.getMonth()];
        case 'C': return pad(Math.floor(d.getFullYear() / 100), padding);
        case 'D': return _strftime(locale.formats.D || '%m/%d/%y', d, locale);
        case 'd': return pad(d.getDate(), padding);
        case 'e': return d.getDate();
        case 'F': return _strftime(locale.formats.F || '%Y-%m-%d', d, locale);
        case 'H': return pad(d.getHours(), padding);
        case 'h': return locale.shortMonths[d.getMonth()];
        case 'I': return pad(hours12(d), padding);
        case 'j':
          var y = new Date(d.getFullYear(), 0, 1);
          var day = Math.ceil((d.getTime() - y.getTime()) / (1000 * 60 * 60 * 24));
          return pad(day, 3);
        case 'k': return pad(d.getHours(), padding == null ? ' ' : padding);
        case 'L': return pad(Math.floor(timestamp % 1000), 3);
        case 'l': return pad(hours12(d), padding == null ? ' ' : padding);
        case 'M': return pad(d.getMinutes(), padding);
        case 'm': return pad(d.getMonth() + 1, padding);
        case 'n': return '\n';
        case 'o': return String(d.getDate()) + ordinal(d.getDate());
        case 'P': return d.getHours() < 12 ? locale.am : locale.pm;
        case 'p': return d.getHours() < 12 ? locale.AM : locale.PM;
        case 'R': return _strftime(locale.formats.R || '%H:%M', d, locale);
        case 'r': return _strftime(locale.formats.r || '%I:%M:%S %p', d, locale);
        case 'S': return pad(d.getSeconds(), padding);
        case 's': return Math.floor(timestamp / 1000);
        case 'T': return _strftime(locale.formats.T || '%H:%M:%S', d, locale);
        case 't': return '\t';
        case 'U': return pad(weekNumber(d, 'sunday'), padding);
        case 'u':
          var day = d.getDay();
          return day == 0 ? 7 : day; // 1 - 7, Monday is first day of the week
        case 'v': return _strftime(locale.formats.v || '%e-%b-%Y', d, locale);
        case 'W': return pad(weekNumber(d, 'monday'), padding);
        case 'w': return d.getDay(); // 0 - 6, Sunday is first day of the week
        case 'Y': return d.getFullYear();
        case 'y':
          var y = String(d.getFullYear());
          return y.slice(y.length - 2);
        case 'Z':
          if (options.utc) {
            return "GMT";
          }
          else {
            var tz = d.toString().match(/\((\w+)\)/);
            return tz && tz[1] || '';
          }
        case 'z':
          if (options.utc) {
            return "+0000";
          }
          else {
            var off = typeof options.timezone == 'number' ? options.timezone : -d.getTimezoneOffset();
            return (off < 0 ? '-' : '+') + pad(Math.abs(off / 60)) + pad(off % 60);
          }
        default: return c;
      }
    });
  }

  function dateToUTC(d) {
    var msDelta = (d.getTimezoneOffset() || 0) * 60000;
    return new Date(d.getTime() + msDelta);
  }

  var RequiredDateMethods = ['getTime', 'getTimezoneOffset', 'getDay', 'getDate', 'getMonth', 'getFullYear', 'getYear', 'getHours', 'getMinutes', 'getSeconds'];
  function quacksLikeDate(x) {
    var i = 0
      , n = RequiredDateMethods.length
      ;
    for (i = 0; i < n; ++i) {
      if (typeof x[RequiredDateMethods[i]] != 'function') {
        return false;
      }
    }
    return true;
  }

  // Default padding is '0' and default length is 2, both are optional.
  function pad(n, padding, length) {
    // pad(n, <length>)
    if (typeof padding === 'number') {
      length = padding;
      padding = '0';
    }

    // Defaults handle pad(n) and pad(n, <padding>)
    if (padding == null) {
      padding = '0';
    }
    length = length || 2;

    var s = String(n);
    // padding may be an empty string, don't loop forever if it is
    if (padding) {
      while (s.length < length) s = padding + s;
    }
    return s;
  }

  function hours12(d) {
    var hour = d.getHours();
    if (hour == 0) hour = 12;
    else if (hour > 12) hour -= 12;
    return hour;
  }

  // Get the ordinal suffix for a number: st, nd, rd, or th
  function ordinal(n) {
    var i = n % 10
      , ii = n % 100
      ;
    if ((ii >= 11 && ii <= 13) || i === 0 || i >= 4) {
      return 'th';
    }
    switch (i) {
      case 1: return 'st';
      case 2: return 'nd';
      case 3: return 'rd';
    }
  }

  // firstWeekday: 'sunday' or 'monday', default is 'sunday'
  //
  // Pilfered & ported from Ruby's strftime implementation.
  function weekNumber(d, firstWeekday) {
    firstWeekday = firstWeekday || 'sunday';

    // This works by shifting the weekday back by one day if we
    // are treating Monday as the first day of the week.
    var wday = d.getDay();
    if (firstWeekday == 'monday') {
      if (wday == 0) // Sunday
        wday = 6;
      else
        wday--;
    }
    var firstDayOfYear = new Date(d.getFullYear(), 0, 1)
      , yday = (d - firstDayOfYear) / 86400000
      , weekNum = (yday + 7 - wday) / 7
      ;
    return Math.floor(weekNum);
  }

}());

},{}],35:[function(require,module,exports){
module.exports={
  "name": "huginn-liquid",
  "version": "0.0.8",
  "description": "Port of Liquid to CoffeeScript",
  "keywords": [
    "Liquid",
    "coffee-script"
  ],
  "author": "bruce davidson <brucedavidson@darkoverlordofdata.com>",
  "contributors": [
    {
      "name": "bruce davidson",
      "email": "brucedavidson@darkoverlordofdata.com"
    }
  ],
  "dependencies": {
    "strftime": "~0.7.0"
  },
  "scripts": {
    "start": "node ./index.js",
    "test": "cake test"
  },
  "bin": {},
  "devDependencies": {
    "chai": "*",
    "mocha": "*",
    "async": "*"
  },
  "repository": "git://github.com/darkoverlordofdata/liquid.coffee",
  "main": "index",
  "engines": {
    "node": ">=0.10.x",
    "npm": ">=1.x.x"
  },
  "license": "MIT"
}

},{}],36:[function(require,module,exports){

},{}],37:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],38:[function(require,module,exports){
var process=require("__browserify_process");// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

},{"__browserify_process":37}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
(1)
});
